#include <iostream>
#include <string>

using namespace std;

// Описание структуры
struct Node {
    string name;
    int age;
    double salary;
    Node* next;
};

// Функция для создания нового узла
Node* createNode(string name, int age, double salary) {
    Node* newNode = new Node();
    newNode->name = name;
    newNode->age = age;
    newNode->salary = salary;
    newNode->next = nullptr;
    return newNode;
}

// Функция для добавления элемента в начало списка
void addToBeginning(Node*& head, string name, int age, double salary) {
    Node* newNode = createNode(name, age, salary);
    newNode->next = head;
    head = newNode;
}

// Функция для добавления элемента в конец списка
void addToEnd(Node*& head, string name, int age, double salary) {
    Node* newNode = createNode(name, age, salary);
    if (head == nullptr) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Функция для добавления элемента после заданного элемента
void addAfter(Node* head, string afterName, string name, int age, double salary) {
    Node* temp = head;
    while (temp != nullptr && temp->name != afterName) {
        temp = temp->next;
    }
    if (temp == nullptr) {
        cout << "Элемент с именем " << afterName << " не найден." << endl;
        return;
    }
    Node* newNode = createNode(name, age, salary);
    newNode->next = temp->next;
    temp->next = newNode;
}

// Функция для добавления элемента перед заданным элементом
void addBefore(Node*& head, string beforeName, string name, int age, double salary) {
    if (head == nullptr) {
        cout << "Список пуст." << endl;
        return;
    }
    if (head->name == beforeName) {
        addToBeginning(head, name, age, salary);
        return;
    }
    Node* temp = head;
    while (temp->next != nullptr && temp->next->name != beforeName) {
        temp = temp->next;
    }
    if (temp->next == nullptr) {
        cout << "Элемент с именем " << beforeName << " не найден." << endl;
        return;
    }
    Node* newNode = createNode(name, age, salary);
    newNode->next = temp->next;
    temp->next = newNode;
}

// Функция для удаления элемента с заданным именем
void deleteNode(Node*& head, string name) {
    if (head == nullptr) {
        cout << "Список пуст." << endl;
        return;
    }
    if (head->name == name) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }
    Node* temp = head;
    while (temp->next != nullptr && temp->next->name != name) {
        temp = temp->next;
    }
    if (temp->next == nullptr) {
        cout << "Элемент с именем " << name << " не найден." << endl;
        return;
    }
    Node* nodeToDelete = temp->next;
    temp->next = temp->next->next;
    delete nodeToDelete;
}

// Функция для вывода списка на экран
void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << "Имя: " << temp->name << ", Возраст: " << temp->age << ", Зарплата: " << temp->salary << endl;
        temp = temp->next;
    }
}

// Основная функция
int main() {
    Node* head = nullptr;

    // Добавление элементов в список
    addToEnd(head, "Alice", 30, 50000.0);
    addToEnd(head, "Bob", 25, 45000.0);
    addToBeginning(head, "Charlie", 35, 55000.0);

    // Вывод списка
    cout << "Список после добавления элементов:" << endl;
    printList(head);

    // Добавление элемента после заданного элемента
    addAfter(head, "Alice", "David", 28, 48000.0);
    cout << "Список после добавления элемента после Alice:" << endl;
    printList(head);

    // Добавление элемента перед заданным элементом
    addBefore(head, "Bob", "Eve", 22, 43000.0);
    cout << "Список после добавления элемента перед Bob:" << endl;
    printList(head);

    // Удаление элемента
    deleteNode(head, "Alice");
    cout << "Список после удаления Alice:" << endl;
    printList(head);

    return 0;
}
